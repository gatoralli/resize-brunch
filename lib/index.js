// Generated by CoffeeScript 1.7.1
(function() {
  var Resize, exec, fs, gm, path, typeIsArray;

  gm = require("gm");

  exec = require("child_process").exec;

  fs = require("fs");

  path = require("path");

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  module.exports = Resize = (function() {
    Resize.prototype.brunchPlugin = true;

    Resize.prototype.formats = ["gif", "jpeg", "jpg", "png"];

    Resize.prototype._resize_binary = "pnmscale";

    function Resize(config) {
      this.config = config;
      this.options = this.config.plugins.resize;
      exec("" + this._resize_binary + " --version", (function(_this) {
        return function(error, stdout, stderr) {
          if (error) {
            return console.error("You need to have pnmscale installed. This is usually done with netpbm. Try brew install netpbm if you use homebrew.");
          }
        };
      })(this));
      null;
    }

    Resize.prototype.onCompile = function(generatedFiles) {
      var baseDirectory, dest, imagePath, optionSet, options, optionsSet, resizedPath, _ref, _results;
      _ref = this.options;
      _results = [];
      for (imagePath in _ref) {
        optionsSet = _ref[imagePath];
        options = typeIsArray(optionsSet) ? optionsSet : [optionsSet];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = options.length; _i < _len; _i++) {
            optionSet = options[_i];
            baseDirectory = imagePath.replace(/\/$/, "");
            dest = path.join(this.config.paths["public"], optionSet.dest);
            if (!fs.existsSync(dest)) {
              fs.mkdirSync(dest);
            }
            _results1.push((function() {
              var _j, _len1, _ref1, _results2;
              _ref1 = this.fetchFiles(baseDirectory);
              _results2 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                imagePath = _ref1[_j];
                resizedPath = path.join(dest, path.relative(baseDirectory, imagePath));
                if (!this.resizedExists(resizedPath)) {
                  _results2.push(this.createResized(resizedPath, imagePath, optionSet));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Resize.prototype.fetchFiles = function(directory) {
      var recursiveFetch;
      recursiveFetch = function(directory) {
        var d, directoryFiles, fileFiles, files, isDirectory, isFile, nextDirectories, prependBase, _i, _len;
        files = [];
        prependBase = function(filename) {
          return path.join(directory, filename);
        };
        isDirectory = function(filename) {
          return fs.statSync(prependBase(filename)).isDirectory();
        };
        isFile = function(filename) {
          return fs.statSync(prependBase(filename)).isFile();
        };
        directoryFiles = fs.readdirSync(directory);
        nextDirectories = directoryFiles.filter(isDirectory);
        fileFiles = directoryFiles.filter(isFile).map(prependBase);
        files = files.concat(fileFiles);
        for (_i = 0, _len = nextDirectories.length; _i < _len; _i++) {
          d = nextDirectories[_i];
          files = files.concat(recursiveFetch(prependBase(d)));
        }
        return files;
      };
      return recursiveFetch(directory);
    };

    Resize.prototype.createResized = function(imagePath, src, options) {
      return gm(src).resize(options.width, options.height).write(imagePath, function(error) {
        if (error) {
          return console.error(error);
        }
      });
    };

    Resize.prototype.resizedExists = function(imagePath) {
      return fs.existsSync(imagePath);
    };

    return Resize;

  })();

}).call(this);
